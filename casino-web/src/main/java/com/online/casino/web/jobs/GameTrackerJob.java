/*
 * Copyright (c) 2009. This beautifully written piece of code has been created by Bjorn Harvold. Please do not use my code without explicit permission or I just might have to come by your office and ruin your day.
 */

package com.online.casino.web.jobs;

import com.online.casino.domain.entity.Casino;
import com.online.casino.domain.entity.GameTemplate;
import com.online.casino.domain.entity.PokerGame;
import com.online.casino.domain.enums.GameStatus;
import com.online.casino.security.SecureChannelHelper;
import com.online.casino.service.AdministrationService;
import org.apache.commons.lang.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import java.util.ArrayList;
import java.util.List;

/**
 * User: Bjorn Harvold Date: Sep 15, 2009 Time: 5:05:57 PM Responsibility: The
 * role of this scheduled job is to make sure there are always enough games
 * available for people to play.
 */
@Component
public class GameTrackerJob {
    private static final Logger log = LoggerFactory.getLogger(GameTrackerJob.class);
    private final AdministrationService administrationService;

    @Autowired
    public GameTrackerJob(AdministrationService administrationService) {
        this.administrationService = administrationService;
    }

    public void track() {

        SecureChannelHelper.secureChannel();

        log.info("Tracking games...");

        try {
            runGameTrackerJob();
        } catch (Exception e) {
            log.error("Error creating data! " + e.getMessage(), e);
        }

        SecureChannelHelper.unsecureChannel();

        log.info("Tracking games complete. Going back to sleep...");
    }

    private List<PokerGame> createGamesForTemplate(GameTemplate template,
                                                  int numberOfGamesToCreate) {
        List<PokerGame> result = new ArrayList<PokerGame>(numberOfGamesToCreate);

        for (int i = 0; i < numberOfGamesToCreate; i++) {
            PokerGame game = new PokerGame();
            game.setTemplate(template);
            game.setStatus(GameStatus.ACTIVE);
            game.setAutoGenerated(Boolean.TRUE);
            game.setGameName(RandomStringUtils.randomAlphabetic(10));

            administrationService.persistPokerGame(game);

            result.add(game);
        }

        return result;
    }

    private List<PokerGame> deleteExcessGames(GameTemplate template, Integer gamesToDelete) {

        // retrieve the most newly created poker games that are empty and delete
        // them
        List<PokerGame> games = administrationService.findLatestEmptyPokerGamesByGameTemplate(template.getId(), gamesToDelete);

        for (PokerGame game : games) {
            game.setStatus(GameStatus.REMOVED);
            administrationService.mergePokerGame(game);
        }

        return games;
    }

    private void runGameTrackerJob() {
        List<PokerGame> games = null;
        // first get the casinos
        List<Casino> casinos = administrationService.findAllCasinos();

        if (casinos != null) {
            // grab the configuration object off the casino - it will tell us
            // what we need to [un-]create
            for (Casino casino : casinos) {
                log.info("Tracking: " + casino.getName());

                Integer gameBuffer = casino.getGameBuffer();
                Integer maxLimit = casino.getEmptyGameMaximumLimit();

                // not using these values at the moment
                // Integer minLimit = casino.getEmptyGameMinimumLimit();
                // Integer deleteOnCheck = casino.getDeleteGamesOnCheck();

                // grab game templates for casino
                List<GameTemplate> templates = administrationService.findGameTemplates(casino.getId(), null, null);

                if (templates != null) {
                    if (log.isTraceEnabled()) {
                        log.trace("Casino has " + templates.size() + " game templates");
                    }

                    // loop through templates and check if for game availability
                    for (GameTemplate template : templates) {
                        // grab an active game count for this template
                        Long gameCount = administrationService.findPokerGameCountForGameTemplate(template.getId());
                        Long emptyGameCount = administrationService.findEmptyPokerGameCountForGameTemplate(template.getId());

                        if (log.isTraceEnabled()) {
                            log.trace("The game buffer is set to: " + gameBuffer);
                            log.trace("There are a total of: " + gameCount + " game(s) for template: " + template.getId());
                            log.trace("There are a total of: " + emptyGameCount + " empty game(s) for template: " + template.getId());
                        }

                        // check if we need to create
                        if (emptyGameCount < gameBuffer) {
                            Integer numberOfGamesToCreate = gameBuffer - emptyGameCount.intValue();

                            if (log.isTraceEnabled()) {
                                log.trace("Need to create "
                                        + numberOfGamesToCreate
                                        + " game(s) from template: "
                                        + template.getId());
                            }

                            // we need to create gameBuffer - emptyGameCount
                            // number of games
                            games = createGamesForTemplate(template, numberOfGamesToCreate);
                        } else if (emptyGameCount > maxLimit) {
                            Integer gamesToDelete = emptyGameCount.intValue() - maxLimit;

                            if (log.isTraceEnabled()) {
                                log.trace("Too many empty games. We need to delete: "
                                                + gamesToDelete + " games");
                            }
                            // we need to remove emptyGameCount - maxLimit
                            // number of games
                            games = deleteExcessGames(template, gamesToDelete);
                        } else {
                            log.info("Nothing needs to be done for this template. The game ratio is ok.");
                        }
                    }
                }

                log.info("Tracking: " + casino.getName() + " complete");
            }
        }
    }
}
