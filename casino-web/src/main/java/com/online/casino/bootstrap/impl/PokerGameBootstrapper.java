/*
 * Copyright (c) 2011. This beautifully written piece of code has been created by Bjorn Harvold.
 * Please do not use my code without explicit permission or I just might have to come by your office and ruin your day.
 */

package com.online.casino.bootstrap.impl;

import com.online.casino.bootstrap.Bootstrapper;
import com.online.casino.bootstrap.BootstrapperException;
import com.online.casino.domain.entity.PokerGame;
import com.online.casino.domain.enums.GameStatus;
import com.online.casino.service.AdministrationService;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Named;
import javax.persistence.EntityManager;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * User: bjorn
 * Date: Nov 4, 2007
 * Time: 11:19:22 AM
 * Inserts required roles into the system
 */
@SuppressWarnings("unchecked")
public class PokerGameBootstrapper extends AbstractBootstrapper implements Bootstrapper {
    private final static Logger log = LoggerFactory.getLogger(PokerGameBootstrapper.class);
    private static int populated = 0;
    private static int omitted = 0;
    private final Resource file = new ClassPathResource("bootstrap/pokergames.xml");
    private final AdministrationService administrationService;

    public PokerGameBootstrapper(AdministrationService administrationService) {
        this.administrationService = administrationService;
    }

    @Transactional
    @Override
    public void create() throws BootstrapperException {

        try {
            if (file.exists()) {

                processCreation();

                log.info("Populated " + populated + " stakes in db");
                log.info("Omitted " + omitted + " stakes from db. Already exists.");

            }
        } catch (Exception e) {
            throw new BootstrapperException(e.getMessage(), e);
        }
    }

    private void processCreation() throws IOException, DocumentException {
        persist(parseXMLFile());
    }

    private List<PokerGame> parseXMLFile() throws IOException, DocumentException {
        List<PokerGame> result = new ArrayList<PokerGame>();

        SAXReader reader = new SAXReader();
        Document document = reader.read(file.getInputStream());
        document.normalize();

        List<Element> games = document.selectNodes("//pokergames/pokergame");

        PokerGame game = null;

        for (Element e : games) {

            String id = e.elementText("id");
            String name = e.elementText("name");
            String gameTemplateId = e.element("game_template").attributeValue("id");

            game = new PokerGame();
            game.setTemplate(administrationService.findGameTemplate(gameTemplateId));
            game.setId(id);
            game.setGameName(name);
            game.setAutoGenerated(true);
            game.setStatus(GameStatus.ACTIVE);

            result.add(game);

        }

        return result;
    }

    /**
     * Saves the admin users to the db before the application becomes active
     *
     * @param games games
     *
     */
    private void persist(List<PokerGame> games) {
        List<PokerGame> dbList = new ArrayList<PokerGame>();

        for (PokerGame game : games) {
            PokerGame tmp = administrationService.findPokerGame(game.getId());

            if (tmp == null) {
                dbList.add(game);
                populated++;
            } else {
                log.info("PokerGame with id: " + game.getId() + " already exists");
                omitted++;
            }
        }

        // ready fr save all
        if (dbList.size() > 0) {
            for (PokerGame game : dbList) {
                administrationService.persistPokerGame(game);
            }
        }

    }

    @Override
    public String toString() {
        return "PokerGamesBootstrapper";
    }
}