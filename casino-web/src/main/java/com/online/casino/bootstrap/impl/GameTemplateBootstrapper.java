/*
 * Copyright (c) 2009. This beautifully written piece of code has been created by Bjorn Harvold. Please do not use my code without explicit permission or I just might have to come by your office and ruin your day.
 */

package com.online.casino.bootstrap.impl;

import com.online.casino.bootstrap.Bootstrapper;
import com.online.casino.bootstrap.BootstrapperException;
import com.online.casino.domain.entity.Casino;
import com.online.casino.domain.entity.GameTemplate;
import com.online.casino.domain.entity.Stake;
import com.online.casino.domain.enums.*;
import com.online.casino.service.AdministrationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Named;
import javax.persistence.EntityManager;
import java.util.List;

/**
 * User: bjorn
 * Date: Nov 4, 2007
 * Time: 11:19:22 AM
 * Inserts required roles into the system
 */
public class GameTemplateBootstrapper extends AbstractBootstrapper implements Bootstrapper {
	private final static Logger log = LoggerFactory.getLogger(GameTemplateBootstrapper.class);
	private static int populated = 0;
	private static int omitted = 0;
	private final static int MAX_PLAYERS = 10;
    private int counter = 1;
    private final AdministrationService administrationService;

    public GameTemplateBootstrapper(AdministrationService administrationService) {
        this.administrationService = administrationService;
    }

    @Transactional
    @Override
    public void create() throws BootstrapperException {

		List<Casino> casinos = administrationService.findAllCasinos();

		for (Casino casino : casinos) {
			Long count = administrationService.findGameTemplateCount(casino.getId());

			log.info("Casino: " + casino.getName() + " already has " + count + " templates");
			
			if (count == 0) {
				createGames(casino);
			}
		}

		log.info("Populated " + populated + " games in db");
		log.info("Omitted " + omitted + " games from db. Already exists.");
	}

	/**
	 * We want to create some game tables on application start up for every game type, limit type and stakes
	 *
	 * @param casino
     * @throws com.online.casino.bootstrap.BootstrapperException
	 */
	private void createGames(Casino casino) throws BootstrapperException {
		try {
			List<Stake> stakes = administrationService.findStakes(casino.getId(), null, null, null);
			LimitType[] limits = LimitType.class.getEnumConstants();
			GameType[] types = GameType.class.getEnumConstants();
			RoundType[] roundTypes = RoundType.class.getEnumConstants();

			for (GameType type : types) {
//				log.info("Game Type: " + type);
				for (LimitType limit : limits) {
//					log.info("Limit: " + limit);
					for (Stake stake : stakes) {
//						log.info("Stake: " + stake.getHigh() + " / " + stake.getLow());
						for (RoundType roundType : roundTypes) {
//							log.info("Round type: " + roundType);
							GameTemplate template = new GameTemplate();
                            template.setId(Integer.toString(counter));
							template.setCasino(casino);
							template.setAutoGenerated(true);
							template.setLimitType(limit);
							template.setMaxPlayers(MAX_PLAYERS);
							template.setType(type);
							template.setRoundType(roundType);
							template.setStake(stake);
							template.setDeviceType(DeviceType.WEB);
							template.setRaiseLimit(3);

							administrationService.persistGameTemplate(template);

                            counter++;
							populated++;
						}
					}
				}
			}
		} catch (Exception e) {
			throw new BootstrapperException(e.getMessage(), e);
		}
	}

	@Override
	public String toString() {
		return "GameTemplateBootstrapper";
	}
}
