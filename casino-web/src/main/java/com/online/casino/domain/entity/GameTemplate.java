package com.online.casino.domain.entity;

import com.online.casino.domain.enums.DeviceType;
import com.online.casino.domain.enums.GameType;
import com.online.casino.domain.enums.LimitType;
import com.online.casino.domain.enums.RoundType;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.ManyToOne;
import javax.persistence.Query;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.util.List;

@Entity

@Configurable
@SuppressWarnings("unchecked")
public class GameTemplate extends AbstractEntity implements Serializable {
	private static final long serialVersionUID = -8951883558403638623L;

	@ManyToOne(optional = false, targetEntity = Casino.class)
	private Casino casino;

	@NotNull
	@ManyToOne(optional = false, targetEntity = Stake.class)
	private Stake stake;

	@NotNull
	@Min(2)
	@Max(10)
	@Column(nullable = false)
	private Integer maxPlayers;

	@Enumerated(EnumType.STRING)
	@NotNull
	@Column(nullable = false)
	private GameType type;

	@Enumerated(EnumType.STRING)
	@NotNull
	@Column(nullable = false)
	private RoundType roundType;

	@Enumerated(EnumType.STRING)
	@NotNull
	@Column(nullable = false)
	private LimitType limitType;

	@NotNull
	@Column(nullable = false)
	private Boolean autoGenerated;

	@Enumerated(EnumType.STRING)
	@NotNull
	@Column(nullable = false)
	private DeviceType deviceType;

	@NotNull
	@Min(1)
	@Max(10)
	@Column(nullable = false)
	private Integer raiseLimit;

    public GameTemplate() {
    }

    private GameTemplate(String id) {
        this.id = id;
    }

    public Casino getCasino() {
        return casino;
    }

    public void setCasino(Casino casino) {
        this.casino = casino;
    }

    public Stake getStake() {
        return stake;
    }

    public void setStake(Stake stake) {
        this.stake = stake;
    }

    public Integer getMaxPlayers() {
        return maxPlayers;
    }

    public void setMaxPlayers(Integer maxPlayers) {
        this.maxPlayers = maxPlayers;
    }

    public GameType getType() {
        return type;
    }

    public void setType(GameType type) {
        this.type = type;
    }

    public RoundType getRoundType() {
        return roundType;
    }

    public void setRoundType(RoundType roundType) {
        this.roundType = roundType;
    }

    public LimitType getLimitType() {
        return limitType;
    }

    public void setLimitType(LimitType limitType) {
        this.limitType = limitType;
    }

    public Boolean isAutoGenerated() {
        return autoGenerated;
    }

    public void setAutoGenerated(Boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
    }

    public DeviceType getDeviceType() {
        return deviceType;
    }

    public void setDeviceType(DeviceType deviceType) {
        this.deviceType = deviceType;
    }

    public Integer getRaiseLimit() {
        return raiseLimit;
    }

    public void setRaiseLimit(Integer raiseLimit) {
        this.raiseLimit = raiseLimit;
    }

    public String getLabel() {
        StringBuilder sb = new StringBuilder();
        sb.append(limitType);
        sb.append(" / ");
        sb.append(maxPlayers);
        sb.append(" / ");
        sb.append(raiseLimit);
        sb.append(" / ");
        sb.append(roundType);
        sb.append(" / ");
        sb.append(stake.getLabel());
        sb.append(" / ");
        sb.append(type);

        return sb.toString();
    }

    @Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("GameTemplate [");
		builder.append(super.toString());
		if (autoGenerated != null) {
			builder.append("autoGenerated=");
			builder.append(autoGenerated);
			builder.append(", ");
		}
		if (casino != null) {
			builder.append("casino=");
			builder.append(casino.getId());
			builder.append(", ");
		}
		if (deviceType != null) {
			builder.append("deviceType=");
			builder.append(deviceType);
			builder.append(", ");
		}
		if (limitType != null) {
			builder.append("limitType=");
			builder.append(limitType);
			builder.append(", ");
		}
		if (maxPlayers != null) {
			builder.append("maxPlayers=");
			builder.append(maxPlayers);
			builder.append(", ");
		}
		if (raiseLimit != null) {
			builder.append("raiseLimit=");
			builder.append(raiseLimit);
			builder.append(", ");
		}
		if (roundType != null) {
			builder.append("roundType=");
			builder.append(roundType);
			builder.append(", ");
		}
		if (stake != null) {
			builder.append("stake=");
			builder.append(stake.getId());
			builder.append(", ");
		}
		if (type != null) {
			builder.append("type=");
			builder.append(type);
		}
		builder.append("]");
		return builder.toString();
	}

	public static List<GameTemplate> findGameTemplates(String casinoId, Integer index, Integer maxResults) {
		List<GameTemplate> result = null;

        if (StringUtils.isBlank(casinoId)) {
            throw new IllegalArgumentException("casinoId cannot be null");
        }

		try {
			Query q = entityManager().createQuery("select g from GameTemplate as g where g.casino.id = :casinoId");
			q.setParameter("casinoId", casinoId);

			if (index != null && maxResults != null) {
				q.setFirstResult(index * maxResults);
				q.setMaxResults(maxResults);
			}

			result = q.getResultList();
		} catch (EmptyResultDataAccessException e) {}

		return result;
	}

	public static Long findGameTemplateCount(String casinoId) {
		Long result = null;

        if (StringUtils.isBlank(casinoId)) {
            throw new IllegalArgumentException("casinoId cannot be null");
        }

		try {
			Query q = entityManager().createQuery("select count(g) from GameTemplate as g where g.casino.id = :casinoId");
			q.setParameter("casinoId", casinoId);

			result = (Long) q.getSingleResult();
		} catch (EmptyResultDataAccessException e) {}

		return result;
	}

	public static GameTemplate findGameTemplateByValues(String casinoId, DeviceType deviceType, LimitType limit, Integer maxPlayers, String stakeId, GameType type) {
		GameTemplate result = null;

        if (StringUtils.isBlank(casinoId)) {
            throw new IllegalArgumentException("casinoId cannot be null");
        }
        if (limit == null) {
            throw new IllegalArgumentException("limit cannot be null");
        }
        if (maxPlayers == null) {
            throw new IllegalArgumentException("maxPlayers cannot be null");
        }
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (StringUtils.isBlank(stakeId)) {
            throw new IllegalArgumentException("stakeId cannot be null");
        }

		try {
			Query q = entityManager().createQuery("select g from GameTemplate as g where g.casino.id = :casinoId and deviceType = :deviceType and limitType = :limitType and maxPlayers = :maxPlayers and g.stake.id = :stakeId and g.type = :type");
			q.setParameter("casinoId", casinoId);
			q.setParameter("deviceType", deviceType);
			q.setParameter("limitType", limit);
			q.setParameter("maxPlayers", maxPlayers);
			q.setParameter("type", type);
			q.setParameter("stakeId", stakeId);

			return (GameTemplate) q.getSingleResult();
		} catch (EmptyResultDataAccessException e) {}

		return result;
	}

	@Transactional
    public void persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            GameTemplate attached = this.entityManager.find(GameTemplate.class, this.id);
            this.entityManager.remove(attached);
        }
    }

    public static void remove(String id) {
        new GameTemplate(id).remove();
    }

    @Transactional
    public void flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        GameTemplate merged = this.entityManager.merge(this);
        this.entityManager.flush();
        this.id = merged.getId();
    }

    public static final EntityManager entityManager() {
        EntityManager em = new GameTemplate().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static GameTemplate findGameTemplate(String id) {
        if (id == null) throw new IllegalArgumentException("An identifier is required to retrieve an instance of GameTemplate");
        return entityManager().find(GameTemplate.class, id);
    }

}
